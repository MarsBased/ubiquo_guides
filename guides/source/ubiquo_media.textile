h2. Ubiquo media

This plugin provides a media management system for Ubiquo. Once installed, you will be able to:

* Centralize and manage all the media files from the Ubiquo Media
  section: Create, edit or delete new assets that will be available
  throughout your app

* Easily enhance your models with a media selector: Add a single line
  to your model definition and it will be immediately able to store
  assets, without migrations


* Use an AJAX asset searcher on forms that will find assets as you
  type them

* Organize your assets by type or visibility: Restrict a model
  attribute to just some types of assets (images, videos...) and decide
  if the asset is public or private


endprologue.

h3. Create a media

h3. Media attachment

h4. Add media to a model

In your model, add:

<ruby>
media_attachment :resources, :size => N, :types => %w{image}
</ruby>

For example:
<ruby>
class ExampleModel < ActiveRecord::Base
  media_attachment :images, :size => 2, :types => %w{image}

  # .......

end
</ruby>

size and types options are optional. By default is sized 1 and any
type.

NOTE: For convention, the attribute name should be always plural no matter if it contains a single element (size option is 1). The media_attachment accessor always returns an array.

h5. Minimum amount of assets

media_attachments able to set the maximum amount of related assets.

If you need to set the minimum, add something like this to your model:

<ruby>
validates_length_of(
  :images_ids,
  :minumum => 1
  )
</ruby>

NOTE: You can add a custom error message adding a :message option to the validates_length_of

h5. Media types

The available types are in the AssetType model, you can get it
running that in your script/console:

<shell>
$ script/console
Loading development environment (Rails 2.3.2)
>> pp AssetType.all.inject({}){|acc, at| acc[at.key] = at.name; acc}
{"audio"=>"Audio",
 "doc"=>"Document",
 "image"=>"Image",
 "video"=>"Video",
 "other"=>"Other",
 "flash"=>"Flash"}
=> nil

</shell>

The types of the :type option of the media_attachment method are the
keys of the hash printed in the script/console example.

Also, if you want to use all types, you can set it to :ALL. It's an
special value.


h4. Insert media selector to their form

In the ubiquo you have to add a media selector. To do that just call the helper:

<erb>
<% form_for ... do |form| %>
  ....
  <%= media_selector form, :images, :visibility => 'public' %>
  ....
<% end %>
</erb>

The first attribute is the form object.
The second is the name of the media attachment.
Visibility option can be 'public' or 'protected'.
This visibility determines if the resource can be accessed from anywhere(public) or requires to login in Ubiquo(protected). Default is public.


h4. Get the resource url

To get the url of a resource you can use url_for_media_attachment helper.
In that example there is a link to a resource:

<erb>
<%= link_to(
             "a link to the first image",
             url_for_media_attachment(object.images.first)
           ) %>
</erb>

h4. Get the resource name

When a resource is associated with something, that relation can be renamed.
This name is unique for the relation.

This is useful when a generic name is added when uploading the asset but in a relation it must be
named with a different name.

In that example there are a link to a resource showing their name:

<erb>
<%= link_to(
             object.name_for_asset(:images, object.images.first),
             url_for_media_attachment(object.images.first)
           ) %>
</erb>

h4. Get the thumbnail url

The url_for_media_attachment accepts an argument specifying a resource version. Versions are defined in
the configuration. To see it just put that in script/console:

<shell>
$ script/console
Loading development environment (Rails 2.3.2)
>> Ubiquo::Config.context(:ubiquo_media).get(:media_styles_list)
=> {:thumb=>"100x100>"}
</shell>

Then, to get this version url just type something like that:

<erb>
<%= link_to(
             "a link to the first image thumbnail",
             url_for_media_attachment(object.images.first, :thumb)
           ) %>
</erb>

h3. Media selector

When adding a media selectior initially you will see something like that:
!images/images/ubiquo_media/initial.png(Media selector initial state)!

Here, you can add new media or select existent.

h4. Upload media

If the 'add new media' option selected, a sub-form will appear.
!images/images/ubiquo_media/adding.png(Media selector adding state)!

Here you have to add a file and their name. When clicked in the
'save' button, the file will be uploaded with AJAX and will be
selected automatically

h4. Select media

If the 'select existent media' option selected, a list will appear.
!images/images/ubiquo_media/selecting.png(Media selector selecting state)!

Here you can search existent assets by their name and select it.

h4. Rename selection

When an asset is selected it has it's own name and a 'selection
name'. This name is only for that relation and can be changed from the
selected item view:
!images/images/ubiquo_media/selected.png(Media selector selected state)!

just click in 'change text' link.

h3. Ubiquo show helpers

For show pages, there are a couple of helpers that can help you to brainlessly
print a list of images and documents.

h5. Images

<ruby>
ubiquo_show_media_attachment_images(
      @instance,
      :media_field,
      'Images list'
    )
</ruby>

h5. Documents

<ruby>
ubiquo_show_media_attachment_docs(
      @instance,
      :media_field,
      'Documents list'
    )
</ruby>


h3. Changelog

"Lighthouse tickets":http://ubiquo.lighthouseapp.com/projects/27683-ubiquo/tickets?q=tagged%3Aubiquo_media

